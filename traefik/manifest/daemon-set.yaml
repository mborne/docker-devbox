kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: traefik
spec:
  template:
    spec:
      serviceAccountName: traefik-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
        - image: traefik:v2.7
          name: traefik-ingress-lb
          ports:
            - name: http
              containerPort: 80
              hostPort: 80
            - name: https
              containerPort: 443
              hostPort: 443
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
          args:
            # Enable the dashboard
            - --api.dashboard

            # Specify that we want to use Traefik as an Ingress Controller.
            - --providers.kubernetesingress
            - --providers.kubernetescrd

            # Define two entrypoint ports, and setup a redirect from HTTP to HTTPS.
            - --entryPoints.web.address=:80
            - --entryPoints.websecure.address=:443
            # https://doc.traefik.io/traefik/routing/providers/kubernetes-ingress/#tls
            - --entrypoints.websecure.http.tls

            # - --entrypoints.web.http.redirections.entryPoint.to=websecure
            # - --entrypoints.web.http.redirections.entryPoint.scheme=https

            # Enable debug logging. Useful to work out why something might not be
            # working. Fetch logs of the pod.
            # - --log.level=debug

            # Let's Encrypt Configurtion.
            # - --certificatesresolvers.default.acme.email=<YOUR_EMAIL>
            # - --certificatesresolvers.default.acme.storage=acme.json
            # - --certificatesresolvers.default.acme.tlschallenge
            # Use the staging ACME server. Uncomment this while testing to prevent
            # hitting rate limits in production.
            # - --certificatesresolvers.default.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/dire
